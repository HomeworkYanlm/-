CLASS
CLASS
'{'
STATIC
STATIC
VOID
VOID
IDENTIFIER
')'
'{'
INT
INT
INT
INT
INT
INT
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
';'
';'
';'
';'
';'
';'
';'
DDO
DDO
DDO
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'<'
'<'
'<'
'<'
'<'
'<'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
':'
':'
':'
':'
':'
':'
':'
PRINT
PRINT
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'%'
'%'
'%'
'%'
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
DEFULT
DEFULT
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
')'
')'
')'
')'
')'
')'
')'
')'
DDD
DDD
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'<'
'<'
'<'
'<'
'<'
'<'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
':'
':'
':'
':'
':'
':'
':'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'-'
'-'
'-'
'-'
'-'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
OOD
'}'
'}'
<eos>
program
    class Main <empty>
        static func main voidtype
            formals
            stmtblock
                vardef x inttype
                assign
                    varref x
                    readint
                do
                    branches
                        branch
                            les
                                varref x
                                intconst 0
                            print
                                cond
                                    mod
                                        varref x
                                        intconst 2
                                    cases
                                        case
                                            intconst 0
                                            stringconst "even"
                                        default
                                            stringconst "odd"
                        branch
                            les
                                varref x
                                intconst 10
                            assign
                                varref x
                                sub
                                    varref x
                                    intconst 1
