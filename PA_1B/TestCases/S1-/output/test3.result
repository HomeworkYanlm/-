CLASS
CLASS
'{'
INT
INT
INT
INT
IDENTIFIER
'('
INT
INT
INT
INT
INT
IDENTIFIER
','
INT
INT
INT
IDENTIFIER
','
INT
INT
INT
IDENTIFIER
')'
'{'
RETURN
RETURN
RETURN
'('
'('
'('
'('
'('
'('
'('
'('
'('
'('
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
'/'
'/'
'/'
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
'}'
INT
INT
INT
INT
IDENTIFIER
'('
')'
'{'
INT
INT
INT
INT
INT
INT
IDENTIFIER
INT
INT
INT
INT
INT
INT
IDENTIFIER
INT
INT
INT
INT
INT
INT
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'*'
'*'
'*'
'*'
IDENTIFIER
IDENTIFIER
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
'('
'('
'('
'('
'('
'('
'('
'('
'('
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'-'
'-'
'-'
'-'
'-'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'/'
'/'
'/'
'/'
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
'%'
'%'
'%'
IDENTIFIER
IDENTIFIER
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
';'
RETURN
RETURN
RETURN
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
','
','
','
','
','
','
','
','
','
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
','
','
','
','
','
','
','
','
','
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
'}'
'}'
<eos>
program
    class MultipleFormals <empty>
        func foo inttype
            formals
                vardef x inttype
                vardef y inttype
                vardef z inttype
            stmtblock
                return
                    div
                        add
                            add
                                varref x
                                varref y
                            varref z
                        intconst 3
        func method inttype
            formals
            stmtblock
                vardef x inttype
                vardef y inttype
                vardef z inttype
                assign
                    varref x
                    intconst 3
                assign
                    varref y
                    add
                        varref x
                        mul
                            varref x
                            varref x
                assign
                    varref z
                    mod
                        sub
                            varref x
                            div
                                varref y
                                varref x
                        varref y
                return
                    call foo
                        <empty>
                        varref x
                        varref y
                        varref z
