CLASS
CLASS
'{'
INT
INT
INT
INT
IDENTIFIER
';'
INT
INT
INT
INT
IDENTIFIER
';'
VOID
VOID
VOID
VOID
IDENTIFIER
'('
INT
INT
INT
INT
INT
IDENTIFIER
')'
'{'
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
'.'
'='
'='
'='
'='
'='
'='
'='
'='
'='
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
';'
'}'
VOID
VOID
VOID
VOID
IDENTIFIER
'('
INT
INT
INT
INT
INT
IDENTIFIER
')'
'{'
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
THIS
'.'
'='
'='
'='
'='
'='
'='
'='
'='
'='
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
';'
'}'
STRING
STRING
STRING
STRING
IDENTIFIER
'('
')'
'{'
RETURN
RETURN
RETURN
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
'}'
'}'
CLASS
CLASS
'{'
STATIC
STATIC
VOID
VOID
IDENTIFIER
')'
'{'
CLASS
CLASS
CLASS
CLASS
CLASS
CLASS
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
';'
CLASS
CLASS
CLASS
CLASS
CLASS
CLASS
IDENTIFIER
CLASS
CLASS
CLASS
CLASS
CLASS
CLASS
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
DCOPY
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
SCOPY
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
'-'
'-'
'-'
'-'
'-'
'-'
'-'
'-'
'-'
'-'
'-'
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
';'
PRINT
PRINT
PRINT
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
')'
','
','
','
','
','
','
','
','
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
')'
')'
')'
')'
')'
')'
')'
')'
')'
'}'
'}'
<eos>
program
    class Point <empty>
        vardef x inttype
        vardef y inttype
        func setX voidtype
            formals
                vardef x inttype
            stmtblock
                assign
                    varref x
                        this
                    varref x
        func setY voidtype
            formals
                vardef y inttype
            stmtblock
                assign
                    varref y
                        this
                    varref y
        func toString stringtype
            formals
            stmtblock
                return
                    add
                        add
                            add
                                add
                                    stringconst "("
                                    varref x
                                stringconst ","
                            varref y
                        stringconst ")"
    class Main <empty>
        static func main voidtype
            formals
            stmtblock
                vardef p classtype Point
                assign
                    varref p
                    newobj Point
                call setX
                    varref p
                    intconst 1
                call setY
                    varref p
                    intconst 1
                vardef p1 classtype Point
                vardef p2 classtype Point
                assign
                    varref p1
                    dcopy
                        varref p
                assign
                    varref p2
                    scopy
                        varref p
                call setX
                    varref p
                    neg
                        intconst 1
                print
                    call toString
                        varref p1
                    call toString
                        varref p2
