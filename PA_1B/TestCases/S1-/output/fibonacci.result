CLASS
CLASS
'{'
STATIC
STATIC
VOID
VOID
IDENTIFIER
')'
'{'
INT
INT
INT
INT
INT
INT
IDENTIFIER
CLASS
CLASS
CLASS
CLASS
CLASS
CLASS
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
NEW
IDENTIFIER
';'
';'
';'
';'
';'
';'
';'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
WHILE
WHILE
WHILE
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'<'
'<'
'<'
'<'
'<'
'<'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
'{'
'{'
PRINT
PRINT
PRINT
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
')'
','
','
','
','
','
','
','
','
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'+'
'+'
'+'
'+'
'+'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
'}'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'='
'='
'='
'='
'='
'='
'='
'='
'='
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
READ_INTEGER
';'
';'
';'
';'
';'
';'
';'
PRINT
PRINT
PRINT
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'.'
'.'
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
')'
')'
')'
')'
')'
')'
')'
')'
')'
','
','
','
','
','
','
','
','
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
'}'
'}'
CLASS
CLASS
'{'
INT
INT
INT
INT
IDENTIFIER
'('
INT
INT
INT
INT
INT
IDENTIFIER
')'
'{'
IF
IF
IF
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'<'
'<'
'<'
'<'
'<'
'<'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
'{'
'{'
RETURN
RETURN
RETURN
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
';'
';'
';'
';'
';'
';'
';'
'}'
RETURN
RETURN
RETURN
RETURN
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'-'
'-'
'-'
'-'
'-'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
'+'
'+'
'+'
'+'
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'('
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
IDENTIFIER
'-'
'-'
'-'
'-'
'-'
LITERAL
LITERAL
LITERAL
LITERAL
LITERAL
')'
')'
')'
')'
')'
')'
')'
')'
';'
';'
';'
';'
';'
';'
';'
'}'
'}'
<eos>
program
    class Main <empty>
        static func main voidtype
            formals
            stmtblock
                vardef i inttype
                vardef F classtype Fibonacci
                assign
                    varref F
                    newobj Fibonacci
                assign
                    varref i
                    intconst 0
                while
                    les
                        varref i
                        intconst 10
                    stmtblock
                        print
                            call get
                                varref F
                                varref i
                            stringconst "\n"
                        assign
                            varref i
                            add
                                varref i
                                intconst 1
                assign
                    varref i
                    readint
                print
                    call get
                        varref F
                        varref i
                    stringconst "\n"
    class Fibonacci <empty>
        func get inttype
            formals
                vardef index inttype
            stmtblock
                if
                    les
                        varref index
                        intconst 2
                    stmtblock
                        return
                            intconst 1
                return
                    add
                        call get
                            <empty>
                            sub
                                varref index
                                intconst 1
                        call get
                            <empty>
                            sub
                                varref index
                                intconst 2
